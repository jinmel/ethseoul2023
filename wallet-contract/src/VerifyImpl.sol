// SPDX-License-Identifier: MIT
    pragma solidity ^0.8.17;
    
    contract Verifier {
        function verify(
            uint256[] memory pubInputs,
            bytes memory proof
        ) public view returns (bool) {
            bool success = true;
            bytes32[848] memory transcript;
            assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa80, mod(mload(0xa0), f_q))mstore(0xa60, 15102604245642238996922946514209681587332326633530611747710597220473391260835)        {            let x := mload(0xe0)            mstore(0xaa0, x)            let y := mload(0x100)            mstore(0xac0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x120)            mstore(0xae0, x)            let y := mload(0x140)            mstore(0xb00, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x160)            mstore(0xb20, x)            let y := mload(0x180)            mstore(0xb40, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xb60, keccak256(0xa60, 256)){            let hash := mload(0xb60)            mstore(0xb80, mod(hash, f_q))            mstore(0xba0, hash)        }        {            let x := mload(0x1a0)            mstore(0xbc0, x)            let y := mload(0x1c0)            mstore(0xbe0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x1e0)            mstore(0xc00, x)            let y := mload(0x200)            mstore(0xc20, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x220)            mstore(0xc40, x)            let y := mload(0x240)            mstore(0xc60, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x260)            mstore(0xc80, x)            let y := mload(0x280)            mstore(0xca0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xcc0, keccak256(0xba0, 288)){            let hash := mload(0xcc0)            mstore(0xce0, mod(hash, f_q))            mstore(0xd00, hash)        }mstore8(0xd20, 1)mstore(0xd20, keccak256(0xd00, 33)){            let hash := mload(0xd20)            mstore(0xd40, mod(hash, f_q))            mstore(0xd60, hash)        }        {            let x := mload(0x2a0)            mstore(0xd80, x)            let y := mload(0x2c0)            mstore(0xda0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x2e0)            mstore(0xdc0, x)            let y := mload(0x300)            mstore(0xde0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x320)            mstore(0xe00, x)            let y := mload(0x340)            mstore(0xe20, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x360)            mstore(0xe40, x)            let y := mload(0x380)            mstore(0xe60, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x3a0)            mstore(0xe80, x)            let y := mload(0x3c0)            mstore(0xea0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xec0, keccak256(0xd60, 352)){            let hash := mload(0xec0)            mstore(0xee0, mod(hash, f_q))            mstore(0xf00, hash)        }        {            let x := mload(0x3e0)            mstore(0xf20, x)            let y := mload(0x400)            mstore(0xf40, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x420)            mstore(0xf60, x)            let y := mload(0x440)            mstore(0xf80, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x460)            mstore(0xfa0, x)            let y := mload(0x480)            mstore(0xfc0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x4a0)            mstore(0xfe0, x)            let y := mload(0x4c0)            mstore(0x1000, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1020, keccak256(0xf00, 288)){            let hash := mload(0x1020)            mstore(0x1040, mod(hash, f_q))            mstore(0x1060, hash)        }mstore(0x1080, mod(mload(0x4e0), f_q))mstore(0x10a0, mod(mload(0x500), f_q))mstore(0x10c0, mod(mload(0x520), f_q))mstore(0x10e0, mod(mload(0x540), f_q))mstore(0x1100, mod(mload(0x560), f_q))mstore(0x1120, mod(mload(0x580), f_q))mstore(0x1140, mod(mload(0x5a0), f_q))mstore(0x1160, mod(mload(0x5c0), f_q))mstore(0x1180, mod(mload(0x5e0), f_q))mstore(0x11a0, mod(mload(0x600), f_q))mstore(0x11c0, mod(mload(0x620), f_q))mstore(0x11e0, mod(mload(0x640), f_q))mstore(0x1200, mod(mload(0x660), f_q))mstore(0x1220, mod(mload(0x680), f_q))mstore(0x1240, mod(mload(0x6a0), f_q))mstore(0x1260, mod(mload(0x6c0), f_q))mstore(0x1280, mod(mload(0x6e0), f_q))mstore(0x12a0, mod(mload(0x700), f_q))mstore(0x12c0, mod(mload(0x720), f_q))mstore(0x12e0, mod(mload(0x740), f_q))mstore(0x1300, mod(mload(0x760), f_q))mstore(0x1320, mod(mload(0x780), f_q))mstore(0x1340, mod(mload(0x7a0), f_q))mstore(0x1360, mod(mload(0x7c0), f_q))mstore(0x1380, mod(mload(0x7e0), f_q))mstore(0x13a0, mod(mload(0x800), f_q))mstore(0x13c0, mod(mload(0x820), f_q))mstore(0x13e0, mod(mload(0x840), f_q))mstore(0x1400, mod(mload(0x860), f_q))mstore(0x1420, mod(mload(0x880), f_q))mstore(0x1440, mod(mload(0x8a0), f_q))mstore(0x1460, mod(mload(0x8c0), f_q))mstore(0x1480, mod(mload(0x8e0), f_q))mstore(0x14a0, mod(mload(0x900), f_q))mstore(0x14c0, mod(mload(0x920), f_q))mstore(0x14e0, mod(mload(0x940), f_q))mstore(0x1500, keccak256(0x1060, 1184)){            let hash := mload(0x1500)            mstore(0x1520, mod(hash, f_q))            mstore(0x1540, hash)        }        {            let x := mload(0x960)            mstore(0x1560, x)            let y := mload(0x980)            mstore(0x1580, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x9a0)            mstore(0x15a0, x)            let y := mload(0x9c0)            mstore(0x15c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0x9e0)            mstore(0x15e0, x)            let y := mload(0xa00)            mstore(0x1600, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := mload(0xa20)            mstore(0x1620, x)            let y := mload(0xa40)            mstore(0x1640, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1660, keccak256(0x1540, 288)){            let hash := mload(0x1660)            mstore(0x1680, mod(hash, f_q))            mstore(0x16a0, hash)        }mstore(0x16c0, mulmod(mload(0x1040), mload(0x1040), f_q))mstore(0x16e0, mulmod(mload(0x16c0), mload(0x16c0), f_q))mstore(0x1700, mulmod(mload(0x16e0), mload(0x16e0), f_q))mstore(0x1720, mulmod(mload(0x1700), mload(0x1700), f_q))mstore(0x1740, mulmod(mload(0x1720), mload(0x1720), f_q))mstore(0x1760, mulmod(mload(0x1740), mload(0x1740), f_q))mstore(0x1780, mulmod(mload(0x1760), mload(0x1760), f_q))mstore(0x17a0, mulmod(mload(0x1780), mload(0x1780), f_q))mstore(0x17c0, mulmod(mload(0x17a0), mload(0x17a0), f_q))mstore(0x17e0, mulmod(mload(0x17c0), mload(0x17c0), f_q))mstore(0x1800, mulmod(mload(0x17e0), mload(0x17e0), f_q))mstore(0x1820, mulmod(mload(0x1800), mload(0x1800), f_q))mstore(0x1840, mulmod(mload(0x1820), mload(0x1820), f_q))mstore(0x1860, mulmod(mload(0x1840), mload(0x1840), f_q))mstore(0x1880, mulmod(mload(0x1860), mload(0x1860), f_q))mstore(0x18a0, mulmod(mload(0x1880), mload(0x1880), f_q))mstore(0x18c0, mulmod(mload(0x18a0), mload(0x18a0), f_q))mstore(0x18e0, mulmod(mload(0x18c0), mload(0x18c0), f_q))mstore(0x1900, mulmod(mload(0x18e0), mload(0x18e0), f_q))mstore(0x1920, mulmod(mload(0x1900), mload(0x1900), f_q))mstore(0x1940, addmod(mload(0x1920), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1960, mulmod(mload(0x1940), 21888221997584217086951279548962733484243966294447177135413498358668068307201, f_q))mstore(0x1980, mulmod(mload(0x1960), 13315224328250071823986980334210714047804323884995968263773489477577155309695, f_q))mstore(0x19a0, addmod(mload(0x1040), 8573018543589203398259425411046561040744040515420066079924714708998653185922, f_q))mstore(0x19c0, mulmod(mload(0x1960), 6852144584591678924477440653887876563116097870276213106119596023961179534039, f_q))mstore(0x19e0, addmod(mload(0x1040), 15036098287247596297768965091369398525432266530139821237578608162614628961578, f_q))mstore(0x1a00, mulmod(mload(0x1960), 6363119021782681274480715230122258277189830284152385293217720612674619714422, f_q))mstore(0x1a20, addmod(mload(0x1040), 15525123850056593947765690515135016811358534116263649050480483573901188781195, f_q))mstore(0x1a40, mulmod(mload(0x1960), 495188420091111145957709789221178673495499187437761988132837836548330853701, f_q))mstore(0x1a60, addmod(mload(0x1040), 21393054451748164076288695956036096415052865212978272355565366350027477641916, f_q))mstore(0x1a80, mulmod(mload(0x1960), 14686510910986211321976396297238126901237973400949744736326777596334651355305, f_q))mstore(0x1aa0, addmod(mload(0x1040), 7201731960853063900270009448019148187310390999466289607371426590241157140312, f_q))mstore(0x1ac0, mulmod(mload(0x1960), 15402826414547299628414612080036060696555554914079673875872749760617770134879, f_q))mstore(0x1ae0, addmod(mload(0x1040), 6485416457291975593831793665221214391992809486336360467825454425958038360738, f_q))mstore(0x1b00, mulmod(mload(0x1960), 1, f_q))mstore(0x1b20, addmod(mload(0x1040), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q)){            let prod := mload(0x19a0)                prod := mulmod(mload(0x19e0), prod, f_q)                mstore(0x1b40, prod)                            prod := mulmod(mload(0x1a20), prod, f_q)                mstore(0x1b60, prod)                            prod := mulmod(mload(0x1a60), prod, f_q)                mstore(0x1b80, prod)                            prod := mulmod(mload(0x1aa0), prod, f_q)                mstore(0x1ba0, prod)                            prod := mulmod(mload(0x1ae0), prod, f_q)                mstore(0x1bc0, prod)                            prod := mulmod(mload(0x1b20), prod, f_q)                mstore(0x1be0, prod)                            prod := mulmod(mload(0x1940), prod, f_q)                mstore(0x1c00, prod)                    }mstore(0x1c40, 32)mstore(0x1c60, 32)mstore(0x1c80, 32)mstore(0x1ca0, mload(0x1c00))mstore(0x1cc0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x1ce0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x1c40, 0xc0, 0x1c20, 0x20), 1), success){                        let inv := mload(0x1c20)            let v                            v := mload(0x1940)                    mstore(0x1940, mulmod(mload(0x1be0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1b20)                    mstore(0x1b20, mulmod(mload(0x1bc0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1ae0)                    mstore(0x1ae0, mulmod(mload(0x1ba0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1aa0)                    mstore(0x1aa0, mulmod(mload(0x1b80), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1a60)                    mstore(0x1a60, mulmod(mload(0x1b60), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1a20)                    mstore(0x1a20, mulmod(mload(0x1b40), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x19e0)                    mstore(0x19e0, mulmod(mload(0x19a0), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x19a0, inv)        }mstore(0x1d00, mulmod(mload(0x1980), mload(0x19a0), f_q))mstore(0x1d20, mulmod(mload(0x19c0), mload(0x19e0), f_q))mstore(0x1d40, mulmod(mload(0x1a00), mload(0x1a20), f_q))mstore(0x1d60, mulmod(mload(0x1a40), mload(0x1a60), f_q))mstore(0x1d80, mulmod(mload(0x1a80), mload(0x1aa0), f_q))mstore(0x1da0, mulmod(mload(0x1ac0), mload(0x1ae0), f_q))mstore(0x1dc0, mulmod(mload(0x1b00), mload(0x1b20), f_q)){            let result := mulmod(mload(0x1dc0), mload(0xa80), f_q)mstore(0x1de0, result)        }mstore(0x1e00, addmod(1, sub(f_q, mload(0x11e0)), f_q))mstore(0x1e20, mulmod(mload(0x1e00), mload(0x11e0), f_q))mstore(0x1e40, addmod(2, sub(f_q, mload(0x11e0)), f_q))mstore(0x1e60, mulmod(mload(0x1e40), mload(0x1e20), f_q))mstore(0x1e80, mulmod(mload(0x10a0), mload(0x1080), f_q))mstore(0x1ea0, addmod(mload(0x1e80), mload(0x10e0), f_q))mstore(0x1ec0, addmod(mload(0x10c0), sub(f_q, mload(0x1ea0)), f_q))mstore(0x1ee0, mulmod(mload(0x1ec0), mload(0x1e60), f_q))mstore(0x1f00, mulmod(mload(0xee0), mload(0x1ee0), f_q))mstore(0x1f20, addmod(1, sub(f_q, mload(0x1220)), f_q))mstore(0x1f40, mulmod(mload(0x1f20), mload(0x1220), f_q))mstore(0x1f60, addmod(2, sub(f_q, mload(0x1220)), f_q))mstore(0x1f80, mulmod(mload(0x1f60), mload(0x1f40), f_q))mstore(0x1fa0, addmod(mload(0x10c0), sub(f_q, mload(0x10a0)), f_q))mstore(0x1fc0, mulmod(mload(0x1fa0), mload(0x1f80), f_q))mstore(0x1fe0, addmod(mload(0x1f00), mload(0x1fc0), f_q))mstore(0x2000, mulmod(mload(0xee0), mload(0x1fe0), f_q))mstore(0x2020, mulmod(mload(0x1e40), mload(0x11e0), f_q))mstore(0x2040, addmod(3, sub(f_q, mload(0x11e0)), f_q))mstore(0x2060, mulmod(mload(0x2040), mload(0x2020), f_q))mstore(0x2080, addmod(mload(0x1080), mload(0x10a0), f_q))mstore(0x20a0, addmod(mload(0x10c0), sub(f_q, mload(0x2080)), f_q))mstore(0x20c0, mulmod(mload(0x20a0), mload(0x2060), f_q))mstore(0x20e0, addmod(mload(0x2000), mload(0x20c0), f_q))mstore(0x2100, mulmod(mload(0xee0), mload(0x20e0), f_q))mstore(0x2120, addmod(1, sub(f_q, mload(0x1200)), f_q))mstore(0x2140, mulmod(mload(0x2120), mload(0x1200), f_q))mstore(0x2160, addmod(2, sub(f_q, mload(0x1200)), f_q))mstore(0x2180, mulmod(mload(0x2160), mload(0x2140), f_q))mstore(0x21a0, addmod(mload(0x10c0), sub(f_q, mload(0x1e80)), f_q))mstore(0x21c0, mulmod(mload(0x21a0), mload(0x2180), f_q))mstore(0x21e0, addmod(mload(0x2100), mload(0x21c0), f_q))mstore(0x2200, mulmod(mload(0xee0), mload(0x21e0), f_q))mstore(0x2220, mulmod(mload(0x2040), mload(0x1e20), f_q))mstore(0x2240, addmod(mload(0x1080), sub(f_q, mload(0x10a0)), f_q))mstore(0x2260, addmod(mload(0x10c0), sub(f_q, mload(0x2240)), f_q))mstore(0x2280, mulmod(mload(0x2260), mload(0x2220), f_q))mstore(0x22a0, addmod(mload(0x2200), mload(0x2280), f_q))mstore(0x22c0, mulmod(mload(0xee0), mload(0x22a0), f_q))mstore(0x22e0, mulmod(mload(0x2160), mload(0x1200), f_q))mstore(0x2300, addmod(3, sub(f_q, mload(0x1200)), f_q))mstore(0x2320, mulmod(mload(0x2300), mload(0x22e0), f_q))mstore(0x2340, addmod(mload(0x10a0), mload(0x10e0), f_q))mstore(0x2360, addmod(mload(0x10c0), sub(f_q, mload(0x2340)), f_q))mstore(0x2380, mulmod(mload(0x2360), mload(0x2320), f_q))mstore(0x23a0, addmod(mload(0x22c0), mload(0x2380), f_q))mstore(0x23c0, mulmod(mload(0xee0), mload(0x23a0), f_q))mstore(0x23e0, mulmod(mload(0x2300), mload(0x2140), f_q))mstore(0x2400, addmod(mload(0x10c0), sub(f_q, sub(f_q, mload(0x10a0))), f_q))mstore(0x2420, mulmod(mload(0x2400), mload(0x23e0), f_q))mstore(0x2440, addmod(mload(0x23c0), mload(0x2420), f_q))mstore(0x2460, mulmod(mload(0xee0), mload(0x2440), f_q))mstore(0x2480, mulmod(mload(0x1f60), mload(0x1220), f_q))mstore(0x24a0, addmod(3, sub(f_q, mload(0x1220)), f_q))mstore(0x24c0, mulmod(mload(0x24a0), mload(0x2480), f_q))mstore(0x24e0, addmod(mload(0x10a0), sub(f_q, mload(0x10c0)), f_q))mstore(0x2500, mulmod(mload(0x24e0), mload(0x24c0), f_q))mstore(0x2520, addmod(mload(0x2460), mload(0x2500), f_q))mstore(0x2540, mulmod(mload(0xee0), mload(0x2520), f_q))mstore(0x2560, mulmod(mload(0x24a0), mload(0x1f40), f_q))mstore(0x2580, mulmod(mload(0x10a0), mload(0x2560), f_q))mstore(0x25a0, addmod(mload(0x2540), mload(0x2580), f_q))mstore(0x25c0, mulmod(mload(0xee0), mload(0x25a0), f_q))mstore(0x25e0, addmod(mload(0x10a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x2600, mulmod(mload(0x25e0), mload(0x10a0), f_q))mstore(0x2620, mulmod(mload(0x2600), mload(0x1240), f_q))mstore(0x2640, addmod(mload(0x25c0), mload(0x2620), f_q))mstore(0x2660, mulmod(mload(0xee0), mload(0x2640), f_q))mstore(0x2680, addmod(1, sub(f_q, mload(0x1320)), f_q))mstore(0x26a0, mulmod(mload(0x2680), mload(0x1dc0), f_q))mstore(0x26c0, addmod(mload(0x2660), mload(0x26a0), f_q))mstore(0x26e0, mulmod(mload(0xee0), mload(0x26c0), f_q))mstore(0x2700, mulmod(mload(0x1380), mload(0x1380), f_q))mstore(0x2720, addmod(mload(0x2700), sub(f_q, mload(0x1380)), f_q))mstore(0x2740, mulmod(mload(0x2720), mload(0x1d00), f_q))mstore(0x2760, addmod(mload(0x26e0), mload(0x2740), f_q))mstore(0x2780, mulmod(mload(0xee0), mload(0x2760), f_q))mstore(0x27a0, addmod(mload(0x1380), sub(f_q, mload(0x1360)), f_q))mstore(0x27c0, mulmod(mload(0x27a0), mload(0x1dc0), f_q))mstore(0x27e0, addmod(mload(0x2780), mload(0x27c0), f_q))mstore(0x2800, mulmod(mload(0xee0), mload(0x27e0), f_q))mstore(0x2820, addmod(1, sub(f_q, mload(0x1d00)), f_q))mstore(0x2840, addmod(mload(0x1d20), mload(0x1d40), f_q))mstore(0x2860, addmod(mload(0x2840), mload(0x1d60), f_q))mstore(0x2880, addmod(mload(0x2860), mload(0x1d80), f_q))mstore(0x28a0, addmod(mload(0x2880), mload(0x1da0), f_q))mstore(0x28c0, addmod(mload(0x2820), sub(f_q, mload(0x28a0)), f_q))mstore(0x28e0, mulmod(mload(0x1280), mload(0xce0), f_q))mstore(0x2900, addmod(mload(0x1080), mload(0x28e0), f_q))mstore(0x2920, addmod(mload(0x2900), mload(0xd40), f_q))mstore(0x2940, mulmod(mload(0x12a0), mload(0xce0), f_q))mstore(0x2960, addmod(mload(0x10a0), mload(0x2940), f_q))mstore(0x2980, addmod(mload(0x2960), mload(0xd40), f_q))mstore(0x29a0, mulmod(mload(0x2980), mload(0x2920), f_q))mstore(0x29c0, mulmod(mload(0x12c0), mload(0xce0), f_q))mstore(0x29e0, addmod(mload(0x10c0), mload(0x29c0), f_q))mstore(0x2a00, addmod(mload(0x29e0), mload(0xd40), f_q))mstore(0x2a20, mulmod(mload(0x2a00), mload(0x29a0), f_q))mstore(0x2a40, mulmod(mload(0x2a20), mload(0x1340), f_q))mstore(0x2a60, mulmod(1, mload(0xce0), f_q))mstore(0x2a80, mulmod(mload(0x1040), mload(0x2a60), f_q))mstore(0x2aa0, addmod(mload(0x1080), mload(0x2a80), f_q))mstore(0x2ac0, addmod(mload(0x2aa0), mload(0xd40), f_q))mstore(0x2ae0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0xce0), f_q))mstore(0x2b00, mulmod(mload(0x1040), mload(0x2ae0), f_q))mstore(0x2b20, addmod(mload(0x10a0), mload(0x2b00), f_q))mstore(0x2b40, addmod(mload(0x2b20), mload(0xd40), f_q))mstore(0x2b60, mulmod(mload(0x2b40), mload(0x2ac0), f_q))mstore(0x2b80, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0xce0), f_q))mstore(0x2ba0, mulmod(mload(0x1040), mload(0x2b80), f_q))mstore(0x2bc0, addmod(mload(0x10c0), mload(0x2ba0), f_q))mstore(0x2be0, addmod(mload(0x2bc0), mload(0xd40), f_q))mstore(0x2c00, mulmod(mload(0x2be0), mload(0x2b60), f_q))mstore(0x2c20, mulmod(mload(0x2c00), mload(0x1320), f_q))mstore(0x2c40, addmod(mload(0x2a40), sub(f_q, mload(0x2c20)), f_q))mstore(0x2c60, mulmod(mload(0x2c40), mload(0x28c0), f_q))mstore(0x2c80, addmod(mload(0x2800), mload(0x2c60), f_q))mstore(0x2ca0, mulmod(mload(0xee0), mload(0x2c80), f_q))mstore(0x2cc0, mulmod(mload(0x12e0), mload(0xce0), f_q))mstore(0x2ce0, addmod(mload(0x1de0), mload(0x2cc0), f_q))mstore(0x2d00, addmod(mload(0x2ce0), mload(0xd40), f_q))mstore(0x2d20, mulmod(mload(0x1300), mload(0xce0), f_q))mstore(0x2d40, addmod(mload(0x1100), mload(0x2d20), f_q))mstore(0x2d60, addmod(mload(0x2d40), mload(0xd40), f_q))mstore(0x2d80, mulmod(mload(0x2d60), mload(0x2d00), f_q))mstore(0x2da0, mulmod(mload(0x2d80), mload(0x13a0), f_q))mstore(0x2dc0, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0xce0), f_q))mstore(0x2de0, mulmod(mload(0x1040), mload(0x2dc0), f_q))mstore(0x2e00, addmod(mload(0x1de0), mload(0x2de0), f_q))mstore(0x2e20, addmod(mload(0x2e00), mload(0xd40), f_q))mstore(0x2e40, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0xce0), f_q))mstore(0x2e60, mulmod(mload(0x1040), mload(0x2e40), f_q))mstore(0x2e80, addmod(mload(0x1100), mload(0x2e60), f_q))mstore(0x2ea0, addmod(mload(0x2e80), mload(0xd40), f_q))mstore(0x2ec0, mulmod(mload(0x2ea0), mload(0x2e20), f_q))mstore(0x2ee0, mulmod(mload(0x2ec0), mload(0x1380), f_q))mstore(0x2f00, addmod(mload(0x2da0), sub(f_q, mload(0x2ee0)), f_q))mstore(0x2f20, mulmod(mload(0x2f00), mload(0x28c0), f_q))mstore(0x2f40, addmod(mload(0x2ca0), mload(0x2f20), f_q))mstore(0x2f60, mulmod(mload(0xee0), mload(0x2f40), f_q))mstore(0x2f80, addmod(1, sub(f_q, mload(0x13c0)), f_q))mstore(0x2fa0, mulmod(mload(0x2f80), mload(0x1dc0), f_q))mstore(0x2fc0, addmod(mload(0x2f60), mload(0x2fa0), f_q))mstore(0x2fe0, mulmod(mload(0xee0), mload(0x2fc0), f_q))mstore(0x3000, mulmod(mload(0x13c0), mload(0x13c0), f_q))mstore(0x3020, addmod(mload(0x3000), sub(f_q, mload(0x13c0)), f_q))mstore(0x3040, mulmod(mload(0x3020), mload(0x1d00), f_q))mstore(0x3060, addmod(mload(0x2fe0), mload(0x3040), f_q))mstore(0x3080, mulmod(mload(0xee0), mload(0x3060), f_q))mstore(0x30a0, addmod(mload(0x1400), mload(0xce0), f_q))mstore(0x30c0, mulmod(mload(0x30a0), mload(0x13e0), f_q))mstore(0x30e0, addmod(mload(0x1440), mload(0xd40), f_q))mstore(0x3100, mulmod(mload(0x30e0), mload(0x30c0), f_q))mstore(0x3120, mulmod(mload(0x1080), mload(0x11a0), f_q))mstore(0x3140, addmod(1, sub(f_q, mload(0x11a0)), f_q))mstore(0x3160, mulmod(mload(0x3140), 0, f_q))mstore(0x3180, addmod(mload(0x3120), mload(0x3160), f_q))mstore(0x31a0, mulmod(mload(0xb80), mload(0x3180), f_q))mstore(0x31c0, mulmod(mload(0x10a0), mload(0x11a0), f_q))mstore(0x31e0, addmod(mload(0x31c0), mload(0x3160), f_q))mstore(0x3200, addmod(mload(0x31a0), mload(0x31e0), f_q))mstore(0x3220, addmod(mload(0x3200), mload(0xce0), f_q))mstore(0x3240, mulmod(mload(0x3220), mload(0x13c0), f_q))mstore(0x3260, mulmod(mload(0xb80), mload(0x1120), f_q))mstore(0x3280, addmod(mload(0x3260), mload(0x1140), f_q))mstore(0x32a0, addmod(mload(0x3280), mload(0xd40), f_q))mstore(0x32c0, mulmod(mload(0x32a0), mload(0x3240), f_q))mstore(0x32e0, addmod(mload(0x3100), sub(f_q, mload(0x32c0)), f_q))mstore(0x3300, mulmod(mload(0x32e0), mload(0x28c0), f_q))mstore(0x3320, addmod(mload(0x3080), mload(0x3300), f_q))mstore(0x3340, mulmod(mload(0xee0), mload(0x3320), f_q))mstore(0x3360, addmod(mload(0x1400), sub(f_q, mload(0x1440)), f_q))mstore(0x3380, mulmod(mload(0x3360), mload(0x1dc0), f_q))mstore(0x33a0, addmod(mload(0x3340), mload(0x3380), f_q))mstore(0x33c0, mulmod(mload(0xee0), mload(0x33a0), f_q))mstore(0x33e0, mulmod(mload(0x3360), mload(0x28c0), f_q))mstore(0x3400, addmod(mload(0x1400), sub(f_q, mload(0x1420)), f_q))mstore(0x3420, mulmod(mload(0x3400), mload(0x33e0), f_q))mstore(0x3440, addmod(mload(0x33c0), mload(0x3420), f_q))mstore(0x3460, mulmod(mload(0xee0), mload(0x3440), f_q))mstore(0x3480, addmod(1, sub(f_q, mload(0x1460)), f_q))mstore(0x34a0, mulmod(mload(0x3480), mload(0x1dc0), f_q))mstore(0x34c0, addmod(mload(0x3460), mload(0x34a0), f_q))mstore(0x34e0, mulmod(mload(0xee0), mload(0x34c0), f_q))mstore(0x3500, mulmod(mload(0x1460), mload(0x1460), f_q))mstore(0x3520, addmod(mload(0x3500), sub(f_q, mload(0x1460)), f_q))mstore(0x3540, mulmod(mload(0x3520), mload(0x1d00), f_q))mstore(0x3560, addmod(mload(0x34e0), mload(0x3540), f_q))mstore(0x3580, mulmod(mload(0xee0), mload(0x3560), f_q))mstore(0x35a0, addmod(mload(0x14a0), mload(0xce0), f_q))mstore(0x35c0, mulmod(mload(0x35a0), mload(0x1480), f_q))mstore(0x35e0, addmod(mload(0x14e0), mload(0xd40), f_q))mstore(0x3600, mulmod(mload(0x35e0), mload(0x35c0), f_q))mstore(0x3620, mulmod(mload(0x1080), mload(0x11c0), f_q))mstore(0x3640, addmod(1, sub(f_q, mload(0x11c0)), f_q))mstore(0x3660, mulmod(mload(0x3640), 0, f_q))mstore(0x3680, addmod(mload(0x3620), mload(0x3660), f_q))mstore(0x36a0, mulmod(mload(0xb80), mload(0x3680), f_q))mstore(0x36c0, mulmod(mload(0x10a0), mload(0x11c0), f_q))mstore(0x36e0, mulmod(mload(0x3640), 64, f_q))mstore(0x3700, addmod(mload(0x36c0), mload(0x36e0), f_q))mstore(0x3720, addmod(mload(0x36a0), mload(0x3700), f_q))mstore(0x3740, addmod(mload(0x3720), mload(0xce0), f_q))mstore(0x3760, mulmod(mload(0x3740), mload(0x1460), f_q))mstore(0x3780, mulmod(mload(0xb80), mload(0x1160), f_q))mstore(0x37a0, addmod(mload(0x3780), mload(0x1180), f_q))mstore(0x37c0, addmod(mload(0x37a0), mload(0xd40), f_q))mstore(0x37e0, mulmod(mload(0x37c0), mload(0x3760), f_q))mstore(0x3800, addmod(mload(0x3600), sub(f_q, mload(0x37e0)), f_q))mstore(0x3820, mulmod(mload(0x3800), mload(0x28c0), f_q))mstore(0x3840, addmod(mload(0x3580), mload(0x3820), f_q))mstore(0x3860, mulmod(mload(0xee0), mload(0x3840), f_q))mstore(0x3880, addmod(mload(0x14a0), sub(f_q, mload(0x14e0)), f_q))mstore(0x38a0, mulmod(mload(0x3880), mload(0x1dc0), f_q))mstore(0x38c0, addmod(mload(0x3860), mload(0x38a0), f_q))mstore(0x38e0, mulmod(mload(0xee0), mload(0x38c0), f_q))mstore(0x3900, mulmod(mload(0x3880), mload(0x28c0), f_q))mstore(0x3920, addmod(mload(0x14a0), sub(f_q, mload(0x14c0)), f_q))mstore(0x3940, mulmod(mload(0x3920), mload(0x3900), f_q))mstore(0x3960, addmod(mload(0x38e0), mload(0x3940), f_q))mstore(0x3980, mulmod(mload(0x1920), mload(0x1920), f_q))mstore(0x39a0, mulmod(mload(0x3980), mload(0x1920), f_q))mstore(0x39c0, mulmod(mload(0x39a0), mload(0x1920), f_q))mstore(0x39e0, mulmod(1, mload(0x1920), f_q))mstore(0x3a00, mulmod(1, mload(0x3980), f_q))mstore(0x3a20, mulmod(1, mload(0x39a0), f_q))mstore(0x3a40, mulmod(mload(0x3960), mload(0x1940), f_q))mstore(0x3a60, mulmod(mload(0x1680), mload(0x1680), f_q))mstore(0x3a80, mulmod(mload(0x3a60), mload(0x1680), f_q))mstore(0x3aa0, mulmod(mload(0x3a80), mload(0x1680), f_q))mstore(0x3ac0, mulmod(mload(0x1520), mload(0x1520), f_q))mstore(0x3ae0, mulmod(mload(0x3ac0), mload(0x1520), f_q))mstore(0x3b00, mulmod(mload(0x3ae0), mload(0x1520), f_q))mstore(0x3b20, mulmod(mload(0x3b00), mload(0x1520), f_q))mstore(0x3b40, mulmod(mload(0x3b20), mload(0x1520), f_q))mstore(0x3b60, mulmod(mload(0x3b40), mload(0x1520), f_q))mstore(0x3b80, mulmod(mload(0x3b60), mload(0x1520), f_q))mstore(0x3ba0, mulmod(mload(0x3b80), mload(0x1520), f_q))mstore(0x3bc0, mulmod(mload(0x3ba0), mload(0x1520), f_q))mstore(0x3be0, mulmod(mload(0x3bc0), mload(0x1520), f_q))mstore(0x3c00, mulmod(mload(0x3be0), mload(0x1520), f_q))mstore(0x3c20, mulmod(mload(0x3c00), mload(0x1520), f_q))mstore(0x3c40, mulmod(mload(0x3c20), mload(0x1520), f_q))mstore(0x3c60, mulmod(mload(0x3c40), mload(0x1520), f_q))mstore(0x3c80, mulmod(mload(0x3c60), mload(0x1520), f_q))mstore(0x3ca0, mulmod(mload(0x3c80), mload(0x1520), f_q))mstore(0x3cc0, mulmod(mload(0x3ca0), mload(0x1520), f_q))mstore(0x3ce0, mulmod(mload(0x3cc0), mload(0x1520), f_q))mstore(0x3d00, mulmod(mload(0x3ce0), mload(0x1520), f_q))mstore(0x3d20, mulmod(mload(0x3d00), mload(0x1520), f_q))mstore(0x3d40, mulmod(mload(0x3d20), mload(0x1520), f_q))mstore(0x3d60, mulmod(mload(0x3d40), mload(0x1520), f_q))mstore(0x3d80, mulmod(mload(0x3d60), mload(0x1520), f_q))mstore(0x3da0, mulmod(mload(0x3d80), mload(0x1520), f_q))mstore(0x3dc0, mulmod(mload(0x3da0), mload(0x1520), f_q))mstore(0x3de0, mulmod(mload(0x3dc0), mload(0x1520), f_q))mstore(0x3e00, mulmod(mload(0x3de0), mload(0x1520), f_q))mstore(0x3e20, mulmod(mload(0x3e00), mload(0x1520), f_q))mstore(0x3e40, mulmod(sub(f_q, mload(0x1080)), 1, f_q))mstore(0x3e60, mulmod(sub(f_q, mload(0x10a0)), mload(0x1520), f_q))mstore(0x3e80, mulmod(1, mload(0x1520), f_q))mstore(0x3ea0, addmod(mload(0x3e40), mload(0x3e60), f_q))mstore(0x3ec0, mulmod(sub(f_q, mload(0x10c0)), mload(0x3ac0), f_q))mstore(0x3ee0, mulmod(1, mload(0x3ac0), f_q))mstore(0x3f00, addmod(mload(0x3ea0), mload(0x3ec0), f_q))mstore(0x3f20, mulmod(sub(f_q, mload(0x1320)), mload(0x3ae0), f_q))mstore(0x3f40, mulmod(1, mload(0x3ae0), f_q))mstore(0x3f60, addmod(mload(0x3f00), mload(0x3f20), f_q))mstore(0x3f80, mulmod(sub(f_q, mload(0x1380)), mload(0x3b00), f_q))mstore(0x3fa0, mulmod(1, mload(0x3b00), f_q))mstore(0x3fc0, addmod(mload(0x3f60), mload(0x3f80), f_q))mstore(0x3fe0, mulmod(sub(f_q, mload(0x13c0)), mload(0x3b20), f_q))mstore(0x4000, mulmod(1, mload(0x3b20), f_q))mstore(0x4020, addmod(mload(0x3fc0), mload(0x3fe0), f_q))mstore(0x4040, mulmod(sub(f_q, mload(0x1400)), mload(0x3b40), f_q))mstore(0x4060, mulmod(1, mload(0x3b40), f_q))mstore(0x4080, addmod(mload(0x4020), mload(0x4040), f_q))mstore(0x40a0, mulmod(sub(f_q, mload(0x1440)), mload(0x3b60), f_q))mstore(0x40c0, mulmod(1, mload(0x3b60), f_q))mstore(0x40e0, addmod(mload(0x4080), mload(0x40a0), f_q))mstore(0x4100, mulmod(sub(f_q, mload(0x1460)), mload(0x3b80), f_q))mstore(0x4120, mulmod(1, mload(0x3b80), f_q))mstore(0x4140, addmod(mload(0x40e0), mload(0x4100), f_q))mstore(0x4160, mulmod(sub(f_q, mload(0x14a0)), mload(0x3ba0), f_q))mstore(0x4180, mulmod(1, mload(0x3ba0), f_q))mstore(0x41a0, addmod(mload(0x4140), mload(0x4160), f_q))mstore(0x41c0, mulmod(sub(f_q, mload(0x14e0)), mload(0x3bc0), f_q))mstore(0x41e0, mulmod(1, mload(0x3bc0), f_q))mstore(0x4200, addmod(mload(0x41a0), mload(0x41c0), f_q))mstore(0x4220, mulmod(sub(f_q, mload(0x1100)), mload(0x3be0), f_q))mstore(0x4240, mulmod(1, mload(0x3be0), f_q))mstore(0x4260, addmod(mload(0x4200), mload(0x4220), f_q))mstore(0x4280, mulmod(sub(f_q, mload(0x1120)), mload(0x3c00), f_q))mstore(0x42a0, mulmod(1, mload(0x3c00), f_q))mstore(0x42c0, addmod(mload(0x4260), mload(0x4280), f_q))mstore(0x42e0, mulmod(sub(f_q, mload(0x1140)), mload(0x3c20), f_q))mstore(0x4300, mulmod(1, mload(0x3c20), f_q))mstore(0x4320, addmod(mload(0x42c0), mload(0x42e0), f_q))mstore(0x4340, mulmod(sub(f_q, mload(0x1160)), mload(0x3c40), f_q))mstore(0x4360, mulmod(1, mload(0x3c40), f_q))mstore(0x4380, addmod(mload(0x4320), mload(0x4340), f_q))mstore(0x43a0, addmod(mload(0x42a0), mload(0x4360), f_q))mstore(0x43c0, mulmod(sub(f_q, mload(0x1180)), mload(0x3c60), f_q))mstore(0x43e0, mulmod(1, mload(0x3c60), f_q))mstore(0x4400, addmod(mload(0x4380), mload(0x43c0), f_q))mstore(0x4420, mulmod(sub(f_q, mload(0x11a0)), mload(0x3c80), f_q))mstore(0x4440, mulmod(1, mload(0x3c80), f_q))mstore(0x4460, addmod(mload(0x4400), mload(0x4420), f_q))mstore(0x4480, mulmod(sub(f_q, mload(0x11c0)), mload(0x3ca0), f_q))mstore(0x44a0, mulmod(1, mload(0x3ca0), f_q))mstore(0x44c0, addmod(mload(0x4460), mload(0x4480), f_q))mstore(0x44e0, mulmod(sub(f_q, mload(0x11e0)), mload(0x3cc0), f_q))mstore(0x4500, mulmod(1, mload(0x3cc0), f_q))mstore(0x4520, addmod(mload(0x44c0), mload(0x44e0), f_q))mstore(0x4540, mulmod(sub(f_q, mload(0x1200)), mload(0x3ce0), f_q))mstore(0x4560, mulmod(1, mload(0x3ce0), f_q))mstore(0x4580, addmod(mload(0x4520), mload(0x4540), f_q))mstore(0x45a0, mulmod(sub(f_q, mload(0x1220)), mload(0x3d00), f_q))mstore(0x45c0, mulmod(1, mload(0x3d00), f_q))mstore(0x45e0, addmod(mload(0x4580), mload(0x45a0), f_q))mstore(0x4600, mulmod(sub(f_q, mload(0x1240)), mload(0x3d20), f_q))mstore(0x4620, mulmod(1, mload(0x3d20), f_q))mstore(0x4640, addmod(mload(0x45e0), mload(0x4600), f_q))mstore(0x4660, addmod(mload(0x4240), mload(0x4620), f_q))mstore(0x4680, mulmod(sub(f_q, mload(0x1280)), mload(0x3d40), f_q))mstore(0x46a0, mulmod(1, mload(0x3d40), f_q))mstore(0x46c0, addmod(mload(0x4640), mload(0x4680), f_q))mstore(0x46e0, mulmod(sub(f_q, mload(0x12a0)), mload(0x3d60), f_q))mstore(0x4700, mulmod(1, mload(0x3d60), f_q))mstore(0x4720, addmod(mload(0x46c0), mload(0x46e0), f_q))mstore(0x4740, mulmod(sub(f_q, mload(0x12c0)), mload(0x3d80), f_q))mstore(0x4760, mulmod(1, mload(0x3d80), f_q))mstore(0x4780, addmod(mload(0x4720), mload(0x4740), f_q))mstore(0x47a0, mulmod(sub(f_q, mload(0x12e0)), mload(0x3da0), f_q))mstore(0x47c0, mulmod(1, mload(0x3da0), f_q))mstore(0x47e0, addmod(mload(0x4780), mload(0x47a0), f_q))mstore(0x4800, mulmod(sub(f_q, mload(0x1300)), mload(0x3dc0), f_q))mstore(0x4820, mulmod(1, mload(0x3dc0), f_q))mstore(0x4840, addmod(mload(0x47e0), mload(0x4800), f_q))mstore(0x4860, mulmod(sub(f_q, mload(0x3a40)), mload(0x3de0), f_q))mstore(0x4880, mulmod(1, mload(0x3de0), f_q))mstore(0x48a0, mulmod(mload(0x39e0), mload(0x3de0), f_q))mstore(0x48c0, mulmod(mload(0x3a00), mload(0x3de0), f_q))mstore(0x48e0, mulmod(mload(0x3a20), mload(0x3de0), f_q))mstore(0x4900, addmod(mload(0x4840), mload(0x4860), f_q))mstore(0x4920, mulmod(sub(f_q, mload(0x1260)), mload(0x3e00), f_q))mstore(0x4940, mulmod(1, mload(0x3e00), f_q))mstore(0x4960, addmod(mload(0x4900), mload(0x4920), f_q))mstore(0x4980, mulmod(mload(0x4960), 1, f_q))mstore(0x49a0, mulmod(mload(0x3e80), 1, f_q))mstore(0x49c0, mulmod(mload(0x3ee0), 1, f_q))mstore(0x49e0, mulmod(mload(0x3f40), 1, f_q))mstore(0x4a00, mulmod(mload(0x3fa0), 1, f_q))mstore(0x4a20, mulmod(mload(0x4000), 1, f_q))mstore(0x4a40, mulmod(mload(0x4060), 1, f_q))mstore(0x4a60, mulmod(mload(0x40c0), 1, f_q))mstore(0x4a80, mulmod(mload(0x4120), 1, f_q))mstore(0x4aa0, mulmod(mload(0x4180), 1, f_q))mstore(0x4ac0, mulmod(mload(0x41e0), 1, f_q))mstore(0x4ae0, mulmod(mload(0x4660), 1, f_q))mstore(0x4b00, mulmod(mload(0x43a0), 1, f_q))mstore(0x4b20, mulmod(mload(0x4300), 1, f_q))mstore(0x4b40, mulmod(mload(0x43e0), 1, f_q))mstore(0x4b60, mulmod(mload(0x4440), 1, f_q))mstore(0x4b80, mulmod(mload(0x44a0), 1, f_q))mstore(0x4ba0, mulmod(mload(0x4500), 1, f_q))mstore(0x4bc0, mulmod(mload(0x4560), 1, f_q))mstore(0x4be0, mulmod(mload(0x45c0), 1, f_q))mstore(0x4c00, mulmod(mload(0x46a0), 1, f_q))mstore(0x4c20, mulmod(mload(0x4700), 1, f_q))mstore(0x4c40, mulmod(mload(0x4760), 1, f_q))mstore(0x4c60, mulmod(mload(0x47c0), 1, f_q))mstore(0x4c80, mulmod(mload(0x4820), 1, f_q))mstore(0x4ca0, mulmod(mload(0x4880), 1, f_q))mstore(0x4cc0, mulmod(mload(0x48a0), 1, f_q))mstore(0x4ce0, mulmod(mload(0x48c0), 1, f_q))mstore(0x4d00, mulmod(mload(0x48e0), 1, f_q))mstore(0x4d20, mulmod(mload(0x4940), 1, f_q))mstore(0x4d40, mulmod(sub(f_q, mload(0x10e0)), 1, f_q))mstore(0x4d60, mulmod(sub(f_q, mload(0x1420)), mload(0x1520), f_q))mstore(0x4d80, addmod(mload(0x4d40), mload(0x4d60), f_q))mstore(0x4da0, mulmod(sub(f_q, mload(0x14c0)), mload(0x3ac0), f_q))mstore(0x4dc0, addmod(mload(0x4d80), mload(0x4da0), f_q))mstore(0x4de0, mulmod(mload(0x4dc0), mload(0x1680), f_q))mstore(0x4e00, mulmod(1, mload(0x1680), f_q))mstore(0x4e20, mulmod(mload(0x3e80), mload(0x1680), f_q))mstore(0x4e40, mulmod(mload(0x3ee0), mload(0x1680), f_q))mstore(0x4e60, addmod(mload(0x4980), mload(0x4de0), f_q))mstore(0x4e80, addmod(mload(0x49c0), mload(0x4e00), f_q))mstore(0x4ea0, addmod(mload(0x4a40), mload(0x4e20), f_q))mstore(0x4ec0, addmod(mload(0x4aa0), mload(0x4e40), f_q))mstore(0x4ee0, mulmod(sub(f_q, mload(0x1340)), 1, f_q))mstore(0x4f00, mulmod(sub(f_q, mload(0x13a0)), mload(0x1520), f_q))mstore(0x4f20, addmod(mload(0x4ee0), mload(0x4f00), f_q))mstore(0x4f40, mulmod(sub(f_q, mload(0x13e0)), mload(0x3ac0), f_q))mstore(0x4f60, addmod(mload(0x4f20), mload(0x4f40), f_q))mstore(0x4f80, mulmod(sub(f_q, mload(0x1480)), mload(0x3ae0), f_q))mstore(0x4fa0, addmod(mload(0x4f60), mload(0x4f80), f_q))mstore(0x4fc0, mulmod(mload(0x4fa0), mload(0x3a60), f_q))mstore(0x4fe0, mulmod(1, mload(0x3a60), f_q))mstore(0x5000, mulmod(mload(0x3e80), mload(0x3a60), f_q))mstore(0x5020, mulmod(mload(0x3ee0), mload(0x3a60), f_q))mstore(0x5040, mulmod(mload(0x3f40), mload(0x3a60), f_q))mstore(0x5060, addmod(mload(0x4e60), mload(0x4fc0), f_q))mstore(0x5080, addmod(mload(0x49e0), mload(0x4fe0), f_q))mstore(0x50a0, addmod(mload(0x4a00), mload(0x5000), f_q))mstore(0x50c0, addmod(mload(0x4a20), mload(0x5020), f_q))mstore(0x50e0, addmod(mload(0x4a80), mload(0x5040), f_q))mstore(0x5100, mulmod(sub(f_q, mload(0x1360)), 1, f_q))mstore(0x5120, mulmod(mload(0x5100), mload(0x3a80), f_q))mstore(0x5140, mulmod(1, mload(0x3a80), f_q))mstore(0x5160, addmod(mload(0x5060), mload(0x5120), f_q))mstore(0x5180, addmod(mload(0x5080), mload(0x5140), f_q))mstore(0x51a0, mulmod(1, mload(0x1040), f_q))mstore(0x51c0, mulmod(1, mload(0x51a0), f_q))mstore(0x51e0, mulmod(15402826414547299628414612080036060696555554914079673875872749760617770134879, mload(0x1040), f_q))mstore(0x5200, mulmod(mload(0x4e00), mload(0x51e0), f_q))mstore(0x5220, mulmod(19032961837237948602743626455740240236231119053033140765040043513661803148152, mload(0x1040), f_q))mstore(0x5240, mulmod(mload(0x4fe0), mload(0x5220), f_q))mstore(0x5260, mulmod(13315224328250071823986980334210714047804323884995968263773489477577155309695, mload(0x1040), f_q))mstore(0x5280, mulmod(mload(0x5140), mload(0x5260), f_q))mstore(0x52a0, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x52c0, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x52e0, mload(0x5160))success := and(eq(staticcall(gas(), 0x7, 0x52a0, 0x60, 0x52a0, 0x40), 1), success)mstore(0x5300, mload(0x52a0))                    mstore(0x5320, mload(0x52c0))mstore(0x5340, mload(0xaa0))                    mstore(0x5360, mload(0xac0))success := and(eq(staticcall(gas(), 0x6, 0x5300, 0x80, 0x5300, 0x40), 1), success)mstore(0x5380, mload(0xae0))                    mstore(0x53a0, mload(0xb00))mstore(0x53c0, mload(0x49a0))success := and(eq(staticcall(gas(), 0x7, 0x5380, 0x60, 0x5380, 0x40), 1), success)mstore(0x53e0, mload(0x5300))                    mstore(0x5400, mload(0x5320))mstore(0x5420, mload(0x5380))                    mstore(0x5440, mload(0x53a0))success := and(eq(staticcall(gas(), 0x6, 0x53e0, 0x80, 0x53e0, 0x40), 1), success)mstore(0x5460, mload(0xb20))                    mstore(0x5480, mload(0xb40))mstore(0x54a0, mload(0x4e80))success := and(eq(staticcall(gas(), 0x7, 0x5460, 0x60, 0x5460, 0x40), 1), success)mstore(0x54c0, mload(0x53e0))                    mstore(0x54e0, mload(0x5400))mstore(0x5500, mload(0x5460))                    mstore(0x5520, mload(0x5480))success := and(eq(staticcall(gas(), 0x6, 0x54c0, 0x80, 0x54c0, 0x40), 1), success)mstore(0x5540, mload(0xd80))                    mstore(0x5560, mload(0xda0))mstore(0x5580, mload(0x5180))success := and(eq(staticcall(gas(), 0x7, 0x5540, 0x60, 0x5540, 0x40), 1), success)mstore(0x55a0, mload(0x54c0))                    mstore(0x55c0, mload(0x54e0))mstore(0x55e0, mload(0x5540))                    mstore(0x5600, mload(0x5560))success := and(eq(staticcall(gas(), 0x6, 0x55a0, 0x80, 0x55a0, 0x40), 1), success)mstore(0x5620, mload(0xdc0))                    mstore(0x5640, mload(0xde0))mstore(0x5660, mload(0x50a0))success := and(eq(staticcall(gas(), 0x7, 0x5620, 0x60, 0x5620, 0x40), 1), success)mstore(0x5680, mload(0x55a0))                    mstore(0x56a0, mload(0x55c0))mstore(0x56c0, mload(0x5620))                    mstore(0x56e0, mload(0x5640))success := and(eq(staticcall(gas(), 0x6, 0x5680, 0x80, 0x5680, 0x40), 1), success)mstore(0x5700, mload(0xe00))                    mstore(0x5720, mload(0xe20))mstore(0x5740, mload(0x50c0))success := and(eq(staticcall(gas(), 0x7, 0x5700, 0x60, 0x5700, 0x40), 1), success)mstore(0x5760, mload(0x5680))                    mstore(0x5780, mload(0x56a0))mstore(0x57a0, mload(0x5700))                    mstore(0x57c0, mload(0x5720))success := and(eq(staticcall(gas(), 0x6, 0x5760, 0x80, 0x5760, 0x40), 1), success)mstore(0x57e0, mload(0xbc0))                    mstore(0x5800, mload(0xbe0))mstore(0x5820, mload(0x4ea0))success := and(eq(staticcall(gas(), 0x7, 0x57e0, 0x60, 0x57e0, 0x40), 1), success)mstore(0x5840, mload(0x5760))                    mstore(0x5860, mload(0x5780))mstore(0x5880, mload(0x57e0))                    mstore(0x58a0, mload(0x5800))success := and(eq(staticcall(gas(), 0x6, 0x5840, 0x80, 0x5840, 0x40), 1), success)mstore(0x58c0, mload(0xc00))                    mstore(0x58e0, mload(0xc20))mstore(0x5900, mload(0x4a60))success := and(eq(staticcall(gas(), 0x7, 0x58c0, 0x60, 0x58c0, 0x40), 1), success)mstore(0x5920, mload(0x5840))                    mstore(0x5940, mload(0x5860))mstore(0x5960, mload(0x58c0))                    mstore(0x5980, mload(0x58e0))success := and(eq(staticcall(gas(), 0x6, 0x5920, 0x80, 0x5920, 0x40), 1), success)mstore(0x59a0, mload(0xe40))                    mstore(0x59c0, mload(0xe60))mstore(0x59e0, mload(0x50e0))success := and(eq(staticcall(gas(), 0x7, 0x59a0, 0x60, 0x59a0, 0x40), 1), success)mstore(0x5a00, mload(0x5920))                    mstore(0x5a20, mload(0x5940))mstore(0x5a40, mload(0x59a0))                    mstore(0x5a60, mload(0x59c0))success := and(eq(staticcall(gas(), 0x6, 0x5a00, 0x80, 0x5a00, 0x40), 1), success)mstore(0x5a80, mload(0xc40))                    mstore(0x5aa0, mload(0xc60))mstore(0x5ac0, mload(0x4ec0))success := and(eq(staticcall(gas(), 0x7, 0x5a80, 0x60, 0x5a80, 0x40), 1), success)mstore(0x5ae0, mload(0x5a00))                    mstore(0x5b00, mload(0x5a20))mstore(0x5b20, mload(0x5a80))                    mstore(0x5b40, mload(0x5aa0))success := and(eq(staticcall(gas(), 0x6, 0x5ae0, 0x80, 0x5ae0, 0x40), 1), success)mstore(0x5b60, mload(0xc80))                    mstore(0x5b80, mload(0xca0))mstore(0x5ba0, mload(0x4ac0))success := and(eq(staticcall(gas(), 0x7, 0x5b60, 0x60, 0x5b60, 0x40), 1), success)mstore(0x5bc0, mload(0x5ae0))                    mstore(0x5be0, mload(0x5b00))mstore(0x5c00, mload(0x5b60))                    mstore(0x5c20, mload(0x5b80))success := and(eq(staticcall(gas(), 0x6, 0x5bc0, 0x80, 0x5bc0, 0x40), 1), success)mstore(0x5c40, 0x0000000000000000000000000000000000000000000000000000000000000000)                    mstore(0x5c60, 0x0000000000000000000000000000000000000000000000000000000000000000)mstore(0x5c80, mload(0x4ae0))success := and(eq(staticcall(gas(), 0x7, 0x5c40, 0x60, 0x5c40, 0x40), 1), success)mstore(0x5ca0, mload(0x5bc0))                    mstore(0x5cc0, mload(0x5be0))mstore(0x5ce0, mload(0x5c40))                    mstore(0x5d00, mload(0x5c60))success := and(eq(staticcall(gas(), 0x6, 0x5ca0, 0x80, 0x5ca0, 0x40), 1), success)mstore(0x5d20, 0x1e53648ce47aa043d79ddae8822214e69f1e7ea2352f4f2b301c7039770eb830)                    mstore(0x5d40, 0x05fc2ac2948f92328a1a3b8215582f9e9a5067e62cdd62d006495cc4d558d266)mstore(0x5d60, mload(0x4b00))success := and(eq(staticcall(gas(), 0x7, 0x5d20, 0x60, 0x5d20, 0x40), 1), success)mstore(0x5d80, mload(0x5ca0))                    mstore(0x5da0, mload(0x5cc0))mstore(0x5dc0, mload(0x5d20))                    mstore(0x5de0, mload(0x5d40))success := and(eq(staticcall(gas(), 0x6, 0x5d80, 0x80, 0x5d80, 0x40), 1), success)mstore(0x5e00, 0x27d7e23ff621aaf3d894f9f4e602a922b2b6de00eeac034ffdc74ec1c115f524)                    mstore(0x5e20, 0x0a8a5027646bac5603a4b0860024958a563125b3a08bdbbe7cbdbc00e2e4abe0)mstore(0x5e40, mload(0x4b20))success := and(eq(staticcall(gas(), 0x7, 0x5e00, 0x60, 0x5e00, 0x40), 1), success)mstore(0x5e60, mload(0x5d80))                    mstore(0x5e80, mload(0x5da0))mstore(0x5ea0, mload(0x5e00))                    mstore(0x5ec0, mload(0x5e20))success := and(eq(staticcall(gas(), 0x6, 0x5e60, 0x80, 0x5e60, 0x40), 1), success)mstore(0x5ee0, 0x2995879f1d544f82a205d23be9c4ed94e4418f9130159373c69029f63d3bfbed)                    mstore(0x5f00, 0x2a2f6defa82ffdba1b7f30a01bbad3173feb6eb93c054f04b42dd8a1a7f74a37)mstore(0x5f20, mload(0x4b40))success := and(eq(staticcall(gas(), 0x7, 0x5ee0, 0x60, 0x5ee0, 0x40), 1), success)mstore(0x5f40, mload(0x5e60))                    mstore(0x5f60, mload(0x5e80))mstore(0x5f80, mload(0x5ee0))                    mstore(0x5fa0, mload(0x5f00))success := and(eq(staticcall(gas(), 0x6, 0x5f40, 0x80, 0x5f40, 0x40), 1), success)mstore(0x5fc0, 0x0f0d81bc0a813bf12b5e76f2b02d1ebaa5e0c0029ecdc09c43dbba43289d5d9a)                    mstore(0x5fe0, 0x1dcb8ccb2186a3f042a3042da84862aec928412e5de24af914e5d3541399a922)mstore(0x6000, mload(0x4b60))success := and(eq(staticcall(gas(), 0x7, 0x5fc0, 0x60, 0x5fc0, 0x40), 1), success)mstore(0x6020, mload(0x5f40))                    mstore(0x6040, mload(0x5f60))mstore(0x6060, mload(0x5fc0))                    mstore(0x6080, mload(0x5fe0))success := and(eq(staticcall(gas(), 0x6, 0x6020, 0x80, 0x6020, 0x40), 1), success)mstore(0x60a0, 0x07f3adf5059d10d9ab1c493bf30db699f1ad585157ec01decb46d7186c3727be)                    mstore(0x60c0, 0x29ed2cd1aa2706948cfaa97451a832975c4b92d346e6dec19aacc25ccf1e5206)mstore(0x60e0, mload(0x4b80))success := and(eq(staticcall(gas(), 0x7, 0x60a0, 0x60, 0x60a0, 0x40), 1), success)mstore(0x6100, mload(0x6020))                    mstore(0x6120, mload(0x6040))mstore(0x6140, mload(0x60a0))                    mstore(0x6160, mload(0x60c0))success := and(eq(staticcall(gas(), 0x6, 0x6100, 0x80, 0x6100, 0x40), 1), success)mstore(0x6180, 0x0bb6fcf4c6f93f536839414ae7f36634c52072d672c7f34cfb48d2ab880e6dd1)                    mstore(0x61a0, 0x17e7b42eebaf908bb65df33b68cbbe8b8a4bff9020685fe901509b75dfebaa93)mstore(0x61c0, mload(0x4ba0))success := and(eq(staticcall(gas(), 0x7, 0x6180, 0x60, 0x6180, 0x40), 1), success)mstore(0x61e0, mload(0x6100))                    mstore(0x6200, mload(0x6120))mstore(0x6220, mload(0x6180))                    mstore(0x6240, mload(0x61a0))success := and(eq(staticcall(gas(), 0x6, 0x61e0, 0x80, 0x61e0, 0x40), 1), success)mstore(0x6260, 0x121798786b7315dd8b5f1e70a45f3d016c1285aff9274e8c144e1911ef62c51e)                    mstore(0x6280, 0x1fe9e8bb84ee78a244a1a8cb6bc6e3135936a31a863b80d0bd4662be60b1725a)mstore(0x62a0, mload(0x4bc0))success := and(eq(staticcall(gas(), 0x7, 0x6260, 0x60, 0x6260, 0x40), 1), success)mstore(0x62c0, mload(0x61e0))                    mstore(0x62e0, mload(0x6200))mstore(0x6300, mload(0x6260))                    mstore(0x6320, mload(0x6280))success := and(eq(staticcall(gas(), 0x6, 0x62c0, 0x80, 0x62c0, 0x40), 1), success)mstore(0x6340, 0x1d1643925d7dfdd93033cd8a871f01869a1a359fdbddd70258b3043c1d1e4325)                    mstore(0x6360, 0x2c621d60bf0ebadb4723d95929b57c693ef6bbe9430d71e26b5ac4469427f979)mstore(0x6380, mload(0x4be0))success := and(eq(staticcall(gas(), 0x7, 0x6340, 0x60, 0x6340, 0x40), 1), success)mstore(0x63a0, mload(0x62c0))                    mstore(0x63c0, mload(0x62e0))mstore(0x63e0, mload(0x6340))                    mstore(0x6400, mload(0x6360))success := and(eq(staticcall(gas(), 0x6, 0x63a0, 0x80, 0x63a0, 0x40), 1), success)mstore(0x6420, 0x2d0bb949f4ee86034b64944a244541470e044943efac1adb5ea80c30b83f6d1f)                    mstore(0x6440, 0x1e4db3cf290c3273f3ea18c85cc5642cbb8310e9cf00583c890e10575269475b)mstore(0x6460, mload(0x4c00))success := and(eq(staticcall(gas(), 0x7, 0x6420, 0x60, 0x6420, 0x40), 1), success)mstore(0x6480, mload(0x63a0))                    mstore(0x64a0, mload(0x63c0))mstore(0x64c0, mload(0x6420))                    mstore(0x64e0, mload(0x6440))success := and(eq(staticcall(gas(), 0x6, 0x6480, 0x80, 0x6480, 0x40), 1), success)mstore(0x6500, 0x3057c11d4d44627a83064ea56875c08912e6d28d74d7a043232b0b0bb2301a9c)                    mstore(0x6520, 0x0862735a19237067fe88b0670d53e0e06b83793ecd9d2db5639066211fd27fab)mstore(0x6540, mload(0x4c20))success := and(eq(staticcall(gas(), 0x7, 0x6500, 0x60, 0x6500, 0x40), 1), success)mstore(0x6560, mload(0x6480))                    mstore(0x6580, mload(0x64a0))mstore(0x65a0, mload(0x6500))                    mstore(0x65c0, mload(0x6520))success := and(eq(staticcall(gas(), 0x6, 0x6560, 0x80, 0x6560, 0x40), 1), success)mstore(0x65e0, 0x1e86c0fe7cec357ce2ea496d2a7bd6c0d50609c28bf7635a5a8426ea63922b18)                    mstore(0x6600, 0x27992b217d23f9a414a17f43d35b23175f12e6fe864402ee18c03502b873616a)mstore(0x6620, mload(0x4c40))success := and(eq(staticcall(gas(), 0x7, 0x65e0, 0x60, 0x65e0, 0x40), 1), success)mstore(0x6640, mload(0x6560))                    mstore(0x6660, mload(0x6580))mstore(0x6680, mload(0x65e0))                    mstore(0x66a0, mload(0x6600))success := and(eq(staticcall(gas(), 0x6, 0x6640, 0x80, 0x6640, 0x40), 1), success)mstore(0x66c0, 0x07b8320cbfcc8853a28da618f238bdc6110102ac1c8e1bcf70f82647f03717cc)                    mstore(0x66e0, 0x035ece57f0f12f66d04ed4f14a5444792bcca760292ab7da58202a9373b20652)mstore(0x6700, mload(0x4c60))success := and(eq(staticcall(gas(), 0x7, 0x66c0, 0x60, 0x66c0, 0x40), 1), success)mstore(0x6720, mload(0x6640))                    mstore(0x6740, mload(0x6660))mstore(0x6760, mload(0x66c0))                    mstore(0x6780, mload(0x66e0))success := and(eq(staticcall(gas(), 0x6, 0x6720, 0x80, 0x6720, 0x40), 1), success)mstore(0x67a0, 0x0f85936c44708409e3e9fb5e2a7ea6604b06997f0ac7fd488e3f147e05a88dbe)                    mstore(0x67c0, 0x0497fbb7c4436dcf36ede6a30ad62e016e059a11a6548eb6980edeb2f1052133)mstore(0x67e0, mload(0x4c80))success := and(eq(staticcall(gas(), 0x7, 0x67a0, 0x60, 0x67a0, 0x40), 1), success)mstore(0x6800, mload(0x6720))                    mstore(0x6820, mload(0x6740))mstore(0x6840, mload(0x67a0))                    mstore(0x6860, mload(0x67c0))success := and(eq(staticcall(gas(), 0x6, 0x6800, 0x80, 0x6800, 0x40), 1), success)mstore(0x6880, mload(0xf20))                    mstore(0x68a0, mload(0xf40))mstore(0x68c0, mload(0x4ca0))success := and(eq(staticcall(gas(), 0x7, 0x6880, 0x60, 0x6880, 0x40), 1), success)mstore(0x68e0, mload(0x6800))                    mstore(0x6900, mload(0x6820))mstore(0x6920, mload(0x6880))                    mstore(0x6940, mload(0x68a0))success := and(eq(staticcall(gas(), 0x6, 0x68e0, 0x80, 0x68e0, 0x40), 1), success)mstore(0x6960, mload(0xf60))                    mstore(0x6980, mload(0xf80))mstore(0x69a0, mload(0x4cc0))success := and(eq(staticcall(gas(), 0x7, 0x6960, 0x60, 0x6960, 0x40), 1), success)mstore(0x69c0, mload(0x68e0))                    mstore(0x69e0, mload(0x6900))mstore(0x6a00, mload(0x6960))                    mstore(0x6a20, mload(0x6980))success := and(eq(staticcall(gas(), 0x6, 0x69c0, 0x80, 0x69c0, 0x40), 1), success)mstore(0x6a40, mload(0xfa0))                    mstore(0x6a60, mload(0xfc0))mstore(0x6a80, mload(0x4ce0))success := and(eq(staticcall(gas(), 0x7, 0x6a40, 0x60, 0x6a40, 0x40), 1), success)mstore(0x6aa0, mload(0x69c0))                    mstore(0x6ac0, mload(0x69e0))mstore(0x6ae0, mload(0x6a40))                    mstore(0x6b00, mload(0x6a60))success := and(eq(staticcall(gas(), 0x6, 0x6aa0, 0x80, 0x6aa0, 0x40), 1), success)mstore(0x6b20, mload(0xfe0))                    mstore(0x6b40, mload(0x1000))mstore(0x6b60, mload(0x4d00))success := and(eq(staticcall(gas(), 0x7, 0x6b20, 0x60, 0x6b20, 0x40), 1), success)mstore(0x6b80, mload(0x6aa0))                    mstore(0x6ba0, mload(0x6ac0))mstore(0x6bc0, mload(0x6b20))                    mstore(0x6be0, mload(0x6b40))success := and(eq(staticcall(gas(), 0x6, 0x6b80, 0x80, 0x6b80, 0x40), 1), success)mstore(0x6c00, mload(0xe80))                    mstore(0x6c20, mload(0xea0))mstore(0x6c40, mload(0x4d20))success := and(eq(staticcall(gas(), 0x7, 0x6c00, 0x60, 0x6c00, 0x40), 1), success)mstore(0x6c60, mload(0x6b80))                    mstore(0x6c80, mload(0x6ba0))mstore(0x6ca0, mload(0x6c00))                    mstore(0x6cc0, mload(0x6c20))success := and(eq(staticcall(gas(), 0x6, 0x6c60, 0x80, 0x6c60, 0x40), 1), success)mstore(0x6ce0, mload(0x1560))                    mstore(0x6d00, mload(0x1580))mstore(0x6d20, mload(0x51c0))success := and(eq(staticcall(gas(), 0x7, 0x6ce0, 0x60, 0x6ce0, 0x40), 1), success)mstore(0x6d40, mload(0x6c60))                    mstore(0x6d60, mload(0x6c80))mstore(0x6d80, mload(0x6ce0))                    mstore(0x6da0, mload(0x6d00))success := and(eq(staticcall(gas(), 0x6, 0x6d40, 0x80, 0x6d40, 0x40), 1), success)mstore(0x6dc0, mload(0x15a0))                    mstore(0x6de0, mload(0x15c0))mstore(0x6e00, mload(0x5200))success := and(eq(staticcall(gas(), 0x7, 0x6dc0, 0x60, 0x6dc0, 0x40), 1), success)mstore(0x6e20, mload(0x6d40))                    mstore(0x6e40, mload(0x6d60))mstore(0x6e60, mload(0x6dc0))                    mstore(0x6e80, mload(0x6de0))success := and(eq(staticcall(gas(), 0x6, 0x6e20, 0x80, 0x6e20, 0x40), 1), success)mstore(0x6ea0, mload(0x15e0))                    mstore(0x6ec0, mload(0x1600))mstore(0x6ee0, mload(0x5240))success := and(eq(staticcall(gas(), 0x7, 0x6ea0, 0x60, 0x6ea0, 0x40), 1), success)mstore(0x6f00, mload(0x6e20))                    mstore(0x6f20, mload(0x6e40))mstore(0x6f40, mload(0x6ea0))                    mstore(0x6f60, mload(0x6ec0))success := and(eq(staticcall(gas(), 0x6, 0x6f00, 0x80, 0x6f00, 0x40), 1), success)mstore(0x6f80, mload(0x1620))                    mstore(0x6fa0, mload(0x1640))mstore(0x6fc0, mload(0x5280))success := and(eq(staticcall(gas(), 0x7, 0x6f80, 0x60, 0x6f80, 0x40), 1), success)mstore(0x6fe0, mload(0x6f00))                    mstore(0x7000, mload(0x6f20))mstore(0x7020, mload(0x6f80))                    mstore(0x7040, mload(0x6fa0))success := and(eq(staticcall(gas(), 0x6, 0x6fe0, 0x80, 0x6fe0, 0x40), 1), success)mstore(0x7060, mload(0x15a0))                    mstore(0x7080, mload(0x15c0))mstore(0x70a0, mload(0x4e00))success := and(eq(staticcall(gas(), 0x7, 0x7060, 0x60, 0x7060, 0x40), 1), success)mstore(0x70c0, mload(0x1560))                    mstore(0x70e0, mload(0x1580))mstore(0x7100, mload(0x7060))                    mstore(0x7120, mload(0x7080))success := and(eq(staticcall(gas(), 0x6, 0x70c0, 0x80, 0x70c0, 0x40), 1), success)mstore(0x7140, mload(0x15e0))                    mstore(0x7160, mload(0x1600))mstore(0x7180, mload(0x4fe0))success := and(eq(staticcall(gas(), 0x7, 0x7140, 0x60, 0x7140, 0x40), 1), success)mstore(0x71a0, mload(0x70c0))                    mstore(0x71c0, mload(0x70e0))mstore(0x71e0, mload(0x7140))                    mstore(0x7200, mload(0x7160))success := and(eq(staticcall(gas(), 0x6, 0x71a0, 0x80, 0x71a0, 0x40), 1), success)mstore(0x7220, mload(0x1620))                    mstore(0x7240, mload(0x1640))mstore(0x7260, mload(0x5140))success := and(eq(staticcall(gas(), 0x7, 0x7220, 0x60, 0x7220, 0x40), 1), success)mstore(0x7280, mload(0x71a0))                    mstore(0x72a0, mload(0x71c0))mstore(0x72c0, mload(0x7220))                    mstore(0x72e0, mload(0x7240))success := and(eq(staticcall(gas(), 0x6, 0x7280, 0x80, 0x7280, 0x40), 1), success)mstore(0x7300, mload(0x6fe0))                    mstore(0x7320, mload(0x7000))mstore(0x7340, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x7360, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x7380, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x73a0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x73c0, mload(0x7280))                    mstore(0x73e0, mload(0x72a0))mstore(0x7400, 0x26186a2d65ee4d2f9c9a5b91f86597d35f192cd120caf7e935d8443d1938e23d)            mstore(0x7420, 0x30441fd1b5d3370482c42152a8899027716989a6996c2535bc9f7fee8aaef79e)            mstore(0x7440, 0x16f363f103c80d7bbc8ad3c6867e0822bbc6000be91a4689755c7df40221c145)            mstore(0x7460, 0x2b1cbb3e521edf5a622d82762a44a5e63f1e50b332d71154a4a7958d6011deff)success := and(eq(staticcall(gas(), 0x8, 0x7300, 0x180, 0x7300, 0x20), 1), success)success := and(eq(mload(0x7300), 1), success)} return success; } }
